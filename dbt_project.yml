
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'flights_demo_dbt'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'flights_demo_dbt'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


on-run-start: 
  - Create schema if not exists {{target.schema}}
  - CREATE TABLE if not exists dwh.log_table (id varchar(50), start_at timestamp, end_at timestamp, run_time float, model_name varchar(50))
  - "{{ run_log('insert', 'General') }}"
  

on-run-end:
  - "{{ run_log('update', 'General') }}"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models
vars:
  init_date: '1900-01-01'
# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  flights_demo_dbt:
    # Config indicated by + and applies to all files under models/example/
    dim:
      +materialized: incremental
      +pre_hook: ["{{ delete_from(this) }}",  "{{ run_log('insert', this.name) }}"]
      +schema: dim
      +post_hook:  "{{ run_log('update', this.name) }}"
    fact:  
      +materialized: incremental
      +schema: fact 
      +pre_hook:   "{{ run_log('insert', this.name) }}"
      +post_hook:  "{{ run_log('update', this.name) }}"